version: '3'
services:
# ---------------------- datalake + API
  db-mongo:
    image: mongo:5.0
    ports:
      - 27017:27017
    networks:
      - datalake
  
  api:
    build:
      context: './datalake'
    ports:
      - 5000:5000
    volumes:
      - ./datalake:/datalake
    networks:
      - api
      - datalake
# ---------------------------------------
# ----------------------- Kafka + Kafdrop
  zookeeper:
    image: confluentinc/cp-zookeeper:5.4.0
    networks: 
      - broker-kafka
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:5.4.0
    networks: 
      - broker-kafka
    depends_on:
      - zookeeper      
    ports:
      - 9092:9092    
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  
  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    networks: 
      - broker-kafka
    depends_on:
      - kafka
    ports:
      - 19000:9000
    environment:
      KAFKA_BROKERCONNECT: kafka:29092
  
  init-kafka:
    image: confluentinc/cp-kafka:5.4.0
    networks: 
      - broker-kafka
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:29092 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:29092 --create --topic temperature --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:29092 --create --topic position --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:29092 --list
      "
    environment:
      KAFKA_BROKERCONNECT: kafka:29092
# ---------------------------------------
# ----------------------- Kafka ETL
  mqtt:
    build:
      context: './messaging/mqtt'    
    entrypoint: [ '/bin/sh', '-c' ]  
    command: ["python mqtt_producer.py"]
  
  bridge:
    build:
      context: './messaging/bridge'
    networks: 
      - broker-kafka
    entrypoint: [ '/bin/sh', '-c' ]  
    command: ["python mqtt_bridge_kafka_producer.py"]
    environment:
      KAFKA_BROKERCONNECT: kafka:29092    
  
  broker:
    build:
      context: './messaging/broker'
    networks: 
      - broker-kafka
      - api
    depends_on:
      - init-kafka
    entrypoint: [ '/bin/sh', '-c' ]  
    command: ["python kafka_subscriber.py"]
    environment:
      KAFKA_BROKERCONNECT: kafka:29092

networks: 
  api:
    driver: bridge
  datalake:
    driver: bridge
  broker-kafka:
    driver: bridge